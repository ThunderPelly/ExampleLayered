@startuml
top to bottom direction
skinparam linetype ortho
skinparam ranksep 50
scale 1024 width
scale 768 height

package "com.example.layered.application" {
    class ProjectService {
        -projectExceptionMessage: String
        -descriptionExceptionMessage: String
        -projectNameExceptionMessage: String
        -insufficientPermissionExceptionMessage: String
        +createProject(projectName: String?, role: UserRole?): Project
        +getProjects(): MutableMap<UUID, Project>
        +addTaskToProject(projectId: UUID?, taskDescription: String?): Project
    }

    class TaskService {
        -descriptionExceptionMessage: String
        -priorityExceptionMessage: String
        +createTask(description: String?): Task
        +getAllTasks(): List<Task>
        +completeTask(description: String?): Task
        +setTaskPriority(description: String?, priority: Int?): Task
    }

    class UserService {
        -userNameExceptionMessage: String
        -usernameMaxLength: Int
        -defaultUserRole: UserRole
        -transactionManager: PlatformTransactionManager
        -userCreationLock: Object
        +createUser(userName: String?, role: UserRole?): User
        +createUniqueUserName(userName: String): String
        +getAllUsers(): List<User>
        +getUserTasks(userName: String?): List<Task>
    }

    class UserTaskService {
        +userRepository: UserRepository
        +taskRepository: TaskRepository
        -businessLogicException: String
        -userNameExceptionMessage: String
        -userOrTaskExceptionMessage: String
        -completedTaskExceptionMessage: String
        +assignTaskToUser(userName: String?, taskDescription: String?): Task
        +shouldAssignTask(user: User): Boolean
        +shouldReassignTask(user: User): Boolean
    }
}



package "com.example.layered.persistence" {
    class ProjectRepository {
        -projects: MutableMap<UUID, Project>
        +saveProject(project: Project): Project
        +getProjectById(projectId: UUID): Project?
        +allProjects: MutableMap<UUID, Project>
    }

    class TaskRepository {
        -tasks: MutableList<Task>
        +saveTask(task: Task): Task
        +allTasks: List<Task>
    }

    class UserRepository {
        -users: MutableList<User>
        +getUserByUsername(username: String?): User?
        +saveUser(user: User): User
        +allUsers: List<User>
    }
}

package "com.example.layered.presentation" {
    class ProjectController {
        +projectService: ProjectService
        +createProject(projectRequestDto: ProjectRequestDto): ProjectResponseDto?
        +listProjects(): List<ProjectResponseDto>
        +addTaskToProject(projectId: UUID, taskDescription: String): ProjectResponseDto?
    }

    class TaskController {
        +taskService: TaskService
        +createTask(taskRequestDto: TaskRequestDto): TaskResponseDto?
        +listTasks(): List<TaskResponseDto>?
        +setTaskPriority(taskDescription: String, priority: Int): TaskResponseDto?
        +completeTask(taskDescription: String): TaskResponseDto?
    }

    class UserController {
        +userService: UserService
        +createUser(userRequestDto: UserRequestDto): UserResponseDto?
        +listUsers(): List<UserResponseDto>?
        +getUserTasks(username: String): List<TaskResponseDto>?
    }

    class UserTaskController {
        +userTaskService: UserTaskService
        +assignTaskToUser(userName: String, taskRequestDto: TaskRequestDto): TaskResponseDto?
    }
}

package "com.example.layered.presentation.dto" {
    class ProjectRequestDto {
        +name: String?
        +role: UserRole?
        +ProjectRequestDto()
    }

    class ProjectResponseDto {
        +projectId: UUID?
        +name: String?
        +tasks: MutableList<Task>?
        +ProjectResponseDto()
    }

    class TaskRequestDto {
        +description: String?
        +TaskRequestDto()
    }

    class TaskResponseDto {
        +description: String?
        +TaskResponseDto()
    }

    class UserRequestDto {
        +userName: String?
        +role: UserRole?
        +UserRequestDto()
    }

    class UserResponseDto {
        +userName: String?
        +role: UserRole?
        +UserResponseDto()
    }
}

package "com.example.layered.model" {
    class Project {
        -projectId: UUID
        -name: String
        +tasks: MutableList<Task>
        +Project(projectId: UUID, name: String)
    }

    class Task {
        -taskId: UUID
        -description: String
        -priority: Int
        -assignedUser: User
        -isCompleted: Boolean
        +Task(taskId: UUID, description: String)
    }

    class User {
        -userId: UUID
        -userName: String
        -role: UserRole
        +assignedTasks: MutableList<Task>
        +User(userId: UUID, userName: String, role: UserRole)
    }

    enum UserRole {
        PROJECT_LEADER
        TEAM_MEMBER
        MANAGER
    }
}

ProjectService --> ProjectRepository
ProjectService --> Project
TaskService --> TaskRepository
TaskService --> Task
UserService --> UserRepository
UserService --> User
UserTaskService --> UserRepository
UserTaskService --> TaskRepository
UserTaskService --> User
UserTaskService --> Task

ProjectController --> ProjectService
TaskController --> TaskService
UserController --> UserService
UserTaskController --> UserTaskService
ProjectController --> Project
TaskController --> Task
UserController --> User
UserTaskController --> User
UserTaskController --> Task

ProjectController --> ProjectRequestDto
ProjectController --> ProjectResponseDto
TaskController --> TaskRequestDto
TaskController --> TaskResponseDto
UserController --> UserRequestDto
UserController --> UserResponseDto
UserTaskController --> TaskRequestDto
UserTaskController --> TaskResponseDto

ProjectRepository --> Project
TaskRepository --> Task
UserRepository --> User

Project --> Task
Task --> User
User --> UserRole

com.example.layered.controller -- com.example.layered.application
com.example.layered.application -- com.example.layered.persistence
com.example.layered.persistence -- com.example.layered.model

@enduml